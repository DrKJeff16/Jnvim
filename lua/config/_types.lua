---@meta

error('(config._types): DO NOT SOURCE THIS FILE DIRECTLY', vim.log.levels.ERROR)

---@module 'plugin.lsp'
---@module 'plugin.alpha'

---@class Config.Util
---@field set_tgc fun(force: boolean?)
---@field flag_installed fun(name: string): fun()
-- Set the global condition for a later submodule call
-- ---
--
-- ## Parameters
--
-- - `field`: Either a `string` that will be the name of a vim `g:...` variable, or
--            a `dictionary` with the keys as the vim `g:...` variable names, and the value
--            as whatever said variables are set to respectively.
--
-- ---
--
-- ## Return
--
-- A function that sets the pre-loading for the colorscheme
-- and initializes the `vim.g.<field>` variable(s)
--
-- ---
---@field colorscheme_init fun(self: Config.Util, fields: string|table<string, any>, force_tgc: boolean?): fun()
-- A `config` function to call your plugin from a `lazy` spec
-- ---
--
-- ## Parameters
--
-- - `mod_str` This parameter must comply with the following format:
--
-- ```lua
-- source('plugin.<plugin_name>[.<...>]')
-- ```
--
-- as all the plugin configs MUST BE IN the repo's `lua/plugins/` directory.
-- **_That being said_**, you can use any module path if you wish to do so.
--
-- ---
--
-- ## Return
--
-- A function that attempts to import the given module from `mod_str`
-- ---
---@field source fun(mod_str: string): fun()
-- Returns the string for the `build` field for `Telescope-fzf` depending on certain conditions
-- ---
--
-- ## Return
--
-- ### Unix
--
-- **The return string could be empty** or something akin to
--
-- ```sh
-- $ make
-- ```
--
-- If `nproc` is found in `PATH` or a valid executable then the string could look like
--
-- ```sh
-- $ make -j"$(nproc)"
-- ```
--
-- ### Windows
--
-- If you're on Windows and use _**MSYS2**_, then it will attempt to look for `mingw32-make.exe`
-- If unsuccessful, **it'll return an empty string**
--
-- ---
---@field tel_fzf_build fun(): string
---@field luarocks_check fun(): boolean
---@field key_variant fun(cmd: ('ed'|'tabnew'|'split'|'vsplit')?): fun()
---@field has_tgc fun(): boolean

---@alias Config.Lazy.LSP table|Lsp.Server|fun()
---@alias Config.Lazy.Alpha nil|table|AlphaCaller|AlphaFun
---@alias Config.Lazy.Colorschemes fun(): (table|CscMod|fun(color: string?, ...))

---@class Config.Lazy
---@field colorschemes Config.Lazy.Colorschemes
---@field lsp fun(): Config.Lazy.LSP
---@field alpha? fun(): Config.Lazy.Alpha

--- vim:ts=4:sts=4:sw=4:et:ai:si:sta:noci:nopi:
